<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.5">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="InsertQuery Drive" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="GUID" elementType="Argument">
            <stringProp name="Argument.name">GUID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BPMSESSIONID" elementType="Argument">
            <stringProp name="Argument.name">BPMSESSIONID</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ASPXAUTH" elementType="Argument">
            <stringProp name="Argument.name">ASPXAUTH</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Token" elementType="Argument">
            <stringProp name="Argument.name">Token</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="BPMCSRF" elementType="Argument">
            <stringProp name="Argument.name">BPMCSRF</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Contact1FullJobTitle" elementType="Argument">
            <stringProp name="Argument.name">Contact1FullJobTitle</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NumberActivity" elementType="Argument">
            <stringProp name="Argument.name">NumberActivity</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TimeNow" elementType="Argument">
            <stringProp name="Argument.name">TimeNow</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ActivityCategoryId" elementType="Argument">
            <stringProp name="Argument.name">ActivityCategoryId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DirveActivityCategoryId" elementType="Argument">
            <stringProp name="Argument.name">DirveActivityCategoryId</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.blazemeter.jmeter.threads.arrivals.FreeFormArrivalsThreadGroup guiclass="com.blazemeter.jmeter.threads.arrivals.FreeFormArrivalsThreadGroupGui" testclass="com.blazemeter.jmeter.threads.arrivals.FreeFormArrivalsThreadGroup" testname="InsertQuery Drive" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <collectionProp name="Schedule">
          <collectionProp name="1342283507">
            <stringProp name="49">1</stringProp>
            <stringProp name="49741">250</stringProp>
            <stringProp name="50">2</stringProp>
          </collectionProp>
          <collectionProp name="-1799468542">
            <stringProp name="49741">250</stringProp>
            <stringProp name="52469">500</stringProp>
            <stringProp name="50">2</stringProp>
          </collectionProp>
        </collectionProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations"></stringProp>
        <stringProp name="Unit">M</stringProp>
        <stringProp name="ConcurrencyLimit">1000</stringProp>
      </com.blazemeter.jmeter.threads.arrivals.FreeFormArrivalsThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;GUID&quot;, &quot;${__UUID}&quot;);
vars.put(&quot;Contact1FullJobTitle&quot;, &quot;${__chooseRandom(Accountant,HR-manager,Financier,QA-Lead,Developer,QA Engineer Contact1FullJobTitle)}&quot;);
vars.put(&quot;NumberActivity&quot;, &quot;${__Random(0,50000)}&quot;);
vars.put(&quot;TimeNow&quot;, &quot;${__time(yyyy-MM-dd,)}&quot;);
vars.put(&quot;TimeEnd&quot;, &quot;${__RandomDate(yyyy-MM-dd,,2023-12-01,,)}&quot;);
vars.put(&quot;ActivityCategoryId&quot;, &quot;${__chooseRandom(03df85bf-6b19-4dea-8463-d5d49b80bb28,2365ae4f-58e6-df11-971b-001d60e938c6,42c74c49-58e6-df11-971b-001d60e938c6,f51c4643-58e6-df11-971b-001d60e938c6,aeb822a8-d53d-4148-8107-0ea4de907081,a20377a9-b4ba-472d-a241-dae5c84a5056,91d60a0a-affe-42c4-8653-a664a73d099c,64f1144e-27e0-43f1-83ec-1fc6e6b1bd9c,84f20531-5841-4e38-a66c-9906ee1479ba,7aff41d6-a738-4f9d-b2a0-71ff0a83cdba,7a1744d0-31d1-4b05-98c7-f5de4e9a4e9b,5df394db-521a-435e-bda9-026d6f2af891,5a8d4d73-f0e6-45dc-9b0c-f395fbfdafb7,02f847f1-a2ab-4f8c-82fa-6a0bd36f4da7,01d991c8-ec7f-477a-a39a-8c2169ad8efe,6b98e06b-e0fc-4caf-8619-965b4cb73fae,fad97fa9-e87c-46a0-8f68-5aa8c340140d,62620234-d095-4ea9-90b4-fced1ea844d4,f5d9b444-ae0b-4a1d-901e-0eb6b23433cb,1024ce40-389a-42d5-956b-fae8a3b09156,e343e1cf-498b-4804-94fc-99c4b628815d,da100ba2-009b-491d-97ce-8e5f7d59d853,d3540646-81f1-4c66-9a5c-d4c8c3c63da6,ceec6ea8-f0ca-4f2b-b261-dacbe52ccd3b,cb75ac91-24a4-4f3a-a52a-300aa77c2f2c,c1d3efc4-2824-49f1-b4cb-46efe5ce8ae6,afd16ab4-2cec-4cea-9080-3b277f04c443,82f5e2f6-03a4-4b90-b987-cf2019a0f36a,802ec9e4-9fb5-44b2-ba1b-8987fc319662,78ed2ab9-e040-4de8-bf7c-7151013c55c9,73d757fb-ff8c-45ee-b9a0-9272141b29b4 ActivityCategoryId)}&quot;);
vars.put(&quot;DirveActivityCategoryId&quot;, &quot;${__chooseRandom(0e7c0968-6442-4094-9603-2c43be20a869,3b5e9790-db0c-4f6d-97bc-1711073f9ed1,55980753-96e5-4351-9907-ab132512669c,5ebe6001-5a64-4e1b-ac0e-dbb67c6aecc2,6e8502b5-30f1-40fb-8ffc-cd43abd46e20,98e373c8-9d7f-4779-9601-9845817976bd,b68f88c6-5eb3-402b-8527-b79ff388c1be,b8747309-741e-4c07-b368-9bf1607779c8,cf74597c-674f-48ed-9b09-697fd9b75a82,d3a1f3be-5964-46c0-8eb0-9bf77bf0e5e0 DriveActivityCategoryId)}&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login query" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;UserName&quot;:&quot;Supervisor&quot;,&quot;UserPassword&quot;:&quot;01%srTo8F1f&quot;,&quot;TimeZoneOffset&quot;:-600}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">10.10.50.223</stringProp>
          <stringProp name="HTTPSampler.port">9900</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ServiceModel/AuthService.svc/Login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">accept-encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">accept-language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="origin" elementType="Header">
                <stringProp name="Header.name">origin</stringProp>
                <stringProp name="Header.value">https://dev-yandex.nobilis.team</stringProp>
              </elementProp>
              <elementProp name="referer" elementType="Header">
                <stringProp name="Header.name">referer</stringProp>
                <stringProp name="Header.value">https://dev-yandex.nobilis.team/Login/Login.html?ReturnUrl=%2FNui%2FViewModule.aspx</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">x-request-source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">x-requested-with</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">BPMSESSIONID</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: BPMSESSIONID=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">ASPXAUTH</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: .ASPXAUTH=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">Token</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: CsrfToken=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">BPMCSRF</stringProp>
            <stringProp name="RegexExtractor.regex">Set-Cookie: BPMCSRF=(.+?);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
            <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsertQuery Activity" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;rootSchemaName&quot;: &quot;Activity&quot;,&#xd;
  &quot;operationType&quot;: 1,&#xd;
  &quot;includeProcessExecutionData&quot;: true,&#xd;
  &quot;columnValues&quot;: {&#xd;
    &quot;items&quot;: {&#xd;
      &quot;ShowInScheduler&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 12,&#xd;
          &quot;value&quot;: true&#xd;
        }&#xd;
      },&#xd;
      &quot;GoCreatedInPage&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 12,&#xd;
          &quot;value&quot;: true&#xd;
        }&#xd;
      },&#xd;
      &quot;Id&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 0,&#xd;
          &quot;value&quot;: &quot;${GUID}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;CreatedBy&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;ModifiedBy&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;Priority&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;ab96fa02-7fe6-df11-971b-001d60e938c6&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;Author&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;Owner&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;Status&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;384d4b84-58e6-df11-971b-001d60e938c6&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;Color&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 18,&#xd;
          &quot;value&quot;: &quot;#405f97&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;Organizer&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;CallDirection&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;1d96a65f-2131-4916-8825-2d142b1000b2&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;Type&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;fbe0acdc-cfc0-df11-b00f-001d60e938c0&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;Result&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;DetailedResult&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 1,&#xd;
          &quot;value&quot;: null&#xd;
        }&#xd;
      },&#xd;
      &quot;ActivityCategory&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 10,&#xd;
          &quot;value&quot;: &quot;${DirveActivityCategoryId}&quot;&#xd;
        }&#xd;
      },&#xd;
      &quot;DueDate&quot;: {&#xd;
        &quot;expressionType&quot;: 2,&#xd;
        &quot;parameter&quot;: {&#xd;
          &quot;dataValueType&quot;: 7,&#xd;
          &quot;value&quot;: &quot;\&quot;${TimeEnd}\&quot;&quot;&#xd;
        }&#xd;
      }&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">10.10.50.223</stringProp>
          <stringProp name="HTTPSampler.port">9900</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">DataService/json/SyncReply/InsertQuery</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">accept-encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">accept-language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">bpmcsrf</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">cookie</stringProp>
                <stringProp name="Header.value">.ASPXAUTH=${ASPXAUTH}; CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; </stringProp>
              </elementProp>
              <elementProp name="origin" elementType="Header">
                <stringProp name="Header.name">origin</stringProp>
                <stringProp name="Header.value">https://dev-yandex.nobilis.team</stringProp>
              </elementProp>
              <elementProp name="referer" elementType="Header">
                <stringProp name="Header.name">referer</stringProp>
                <stringProp name="Header.value">https://dev-yandex.nobilis.team/Nui/ViewModule.aspx</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">x-request-source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">x-requested-with</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsertQuery Catalog" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;rootSchemaName&quot;:&quot;Job&quot;,&#xd;
  &quot;operationType&quot;:1,&#xd;
  &quot;includeProcessExecutionData&quot;:true,&#xd;
  &quot;columnValues&quot;:&#xd;
  {&quot;items&quot;:&#xd;
    {&quot;Id&quot;:&#xd;
      {&quot;expressionType&quot;:2,&#xd;
        &quot;parameter&quot;:&#xd;
        {&quot;dataValueType&quot;:0,&#xd;
          &quot;value&quot;:&quot;${GUID}&quot;}&#xd;
        },&#xd;
        &quot;CreatedBy&quot;:&#xd;
        {&quot;expressionType&quot;:2,&#xd;
          &quot;parameter&quot;:&#xd;
          {&quot;dataValueType&quot;:10,&#xd;
            &quot;value&quot;:&quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;}&#xd;
            },&#xd;
            &quot;ModifiedBy&quot;:&#xd;
            {&quot;expressionType&quot;:2,&#xd;
              &quot;parameter&quot;:&#xd;
              {&quot;dataValueType&quot;:10,&#xd;
                &quot;value&quot;:&quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;}&#xd;
                },&#xd;
                &quot;Name&quot;:&#xd;
                {&quot;expressionType&quot;:2,&#xd;
                  &quot;parameter&quot;:&#xd;
                  {&quot;dataValueType&quot;:1,&#xd;
                    &quot;value&quot;:&quot;${Contact1FullJobTitle} ${NumberActivity}&quot;}&#xd;
                  },&#xd;
                &quot;Description&quot;:&#xd;
                {&quot;expressionType&quot;:2,&#xd;
                  &quot;parameter&quot;:&#xd;
                  {&quot;dataValueType&quot;:1,&quot;value&quot;:&quot;Test Catalog Query&quot;}&#xd;
                    }&#xd;
                    }&#xd;
                  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">10.10.50.223</stringProp>
          <stringProp name="HTTPSampler.port">9900</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">DataService/json/SyncReply/InsertQuery</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">accept-encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">bpmcsrf</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json; charset=utf-8</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">cookie</stringProp>
                <stringProp name="Header.value">.ASPXAUTH=${ASPXAUTH}; CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; </stringProp>
              </elementProp>
              <elementProp name="origin" elementType="Header">
                <stringProp name="Header.name">origin</stringProp>
                <stringProp name="Header.value">https://dev-yandex.nobilis.team</stringProp>
              </elementProp>
              <elementProp name="referer" elementType="Header">
                <stringProp name="Header.name">referer</stringProp>
                <stringProp name="Header.value">https://dev-yandex.nobilis.team/Nui/ViewModule.aspx</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">x-request-source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">x-requested-with</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">accept-language</stringProp>
                <stringProp name="Header.value">ru-RU,ru;q=0.9,en-US,en;q=0.8</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="InsertQuery Anonymous" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;Name&quot;: &quot;Activity&quot;,&#xd;
  &quot;fields&quot;: [&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;Title&quot;,&#xd;
      &quot;fieldValue&quot;: &quot;Test Activity Anonymous ${NumberActivity}&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;fieldType&quot;: &quot;Date&quot;,&#xd;
      &quot;fieldName&quot;: &quot;DueDate&quot;,&#xd;
      &quot;fieldValue&quot;: &quot;${TimeEnd}&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;PriorityId&quot;,&#xd;
      &quot;fieldValue&quot;: &quot;ab96fa02-7fe6-df11-971b-001d60e938c6&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;AuthorId&quot;,&#xd;
      &quot;fieldValue&quot;: &quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;OwnerId&quot;,&#xd;
      &quot;fieldValue&quot;: &quot;410006e1-ca4e-4502-a9ec-e54d922d2c00&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;StatusId&quot;,&#xd;
      &quot;fieldValue&quot;: &quot;0e5861f9-8456-45d9-81b2-e11c13dc67be&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;TypeId&quot;,&#xd;
      &quot;fieldValue&quot;: &quot;fbe0acdc-cfc0-df11-b00f-001d60e938c6&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;fieldName&quot;: &quot;ActivityCategoryId&quot;,&#xd;
      &quot;fieldValue&quot;: &quot;&quot;&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">dev-drive-yandex.nobilis.team</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">ServiceModel/GoCreateObjectService.svc/createObject</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="accept-encoding" elementType="Header">
                <stringProp name="Header.name">accept-encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="accept-language" elementType="Header">
                <stringProp name="Header.name">accept-language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
              </elementProp>
              <elementProp name="bpmcsrf" elementType="Header">
                <stringProp name="Header.name">bpmcsrf</stringProp>
                <stringProp name="Header.value">${BPMCSRF}</stringProp>
              </elementProp>
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">cookie</stringProp>
                <stringProp name="Header.value">.ASPXAUTH=${ASPXAUTH}; CsrfToken=${Token}; BPMCSRF=${BPMCSRF}; </stringProp>
              </elementProp>
              <elementProp name="origin" elementType="Header">
                <stringProp name="Header.name">origin</stringProp>
                <stringProp name="Header.value">https://dev-yandex.nobilis.team</stringProp>
              </elementProp>
              <elementProp name="referer" elementType="Header">
                <stringProp name="Header.name">referer</stringProp>
                <stringProp name="Header.value">https://dev-yandex.nobilis.team/Nui/ViewModule.aspx</stringProp>
              </elementProp>
              <elementProp name="x-request-source" elementType="Header">
                <stringProp name="Header.name">x-request-source</stringProp>
                <stringProp name="Header.value">ajax-provider</stringProp>
              </elementProp>
              <elementProp name="x-requested-with" elementType="Header">
                <stringProp name="Header.name">x-requested-with</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
